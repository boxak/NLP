url <- "https://dict.naver.com/search.nhn?dicQuery=%EC%9B%80%EC%A7%81%EC%9D%B4%EB%8A%94&query=%EC%9B%80%EC%A7%81%EC%9D%B4%EB%8A%94&target=dic&ie=utf8&query_utf=&isOnlyViewEE="
html <- read_html(url)
View(html)
item <- html_nodes(".gnbLayerClose")
View(item)
item <- html_nodes(".wrap")
item <- html_nodes("#wrap")
item <- html_nodes(html,"#wrap")
View(item)
item <- html_nodes(html,"#container")
View(item)
item <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[1]/a[1]/span/strong')
View(item)
View(item)
text <- html_text(item,trim=TRUE)
library('RcppMeCab')
RcppMeCab::pos("움직이다")
RcppMeCab::pos("움직이는")
RcppMeCab::pos("움직였다")
typeof(RcppMeCab::pos("움직였다"))
str_detect(RcppMeCab::pos("움직였다"),"VV+")
str_detect(as.character(RcppMeCab::pos("움직였다")),"VV+")
str_detect(as.character(RcppMeCab::pos("움직였다")),"NNG")
str_detect(as.character(RcppMeCab::pos("움직였다")),"EC")
as.character(RcppMeCab::pos("움직였다")
as.character(RcppMeCab::pos("움직였다"))
str_detect(as.character(RcppMeCab::pos("움직이다")),"VV")
str_detect(as.character(RcppMeCab::pos("움직이다")),"VV+")
as.character(RcppMeCab::pos("움직이다"))
str_detect(as.character(RcppMeCab::pos("움직이다")),"VV\")
str_detect(as.character(RcppMeCab::pos("움직이다")),"VV\")
str_detect(as.character(RcppMeCab::pos("움직이다")),"VV\\")
str_detect(as.character(RcppMeCab::pos("움직이다")),"NNP")
str_detect(as.character(RcppMeCab::pos("움직이다")),"VV\"")
str_detect(as.character(RcppMeCab::pos("움직였다")),"VV\"")
str <- as.character(str_extract(RcppMeCab::pos("움직이다")),"^\"")
str <- as.character(str_extract(RcppMeCab::pos("움직이다")),pattern = "^\"")
str <- as.character(str_extract(RcppMeCab::pos("움직이다"),pattern = "^\""))
str <- str_extract(RcppMeCab::pos("움직이다"),pattern = "^\"")
str <- str_extract(RcppMeCab::pos("움직이다"),"^\"")
str <- grep("VV",RcppMeCab::pos("움직이다"))
str
RcppMeCab::pos("움직이다")[str]
str_extract(as.character(RcppMeCab::pos("움직이다")),"^\"//VV")
str_extract(as.character(RcppMeCab::pos("움직이다")),"^\"/VV")
str_extract(as.character(RcppMeCab::pos("움직이다")),"^\"/VV$")
str_extract(as.character(RcppMeCab::pos("움직이다")),"^\"//VV$")
str_extract(as.character(RcppMeCab::pos("움직이다")),"^VV")
str_extract(as.character(RcppMeCab::pos("움직이다")),"VV")
str_extract(as.character(RcppMeCab::pos("움직이다")),"VV$")
str_extract(as.character(RcppMeCab::pos("움직이다")),"V([A-Z])")
str_extract(as.character(RcppMeCab::pos("움직이다")),"[ㄱ-힣]")
str_extract(as.character(RcppMeCab::pos("움직이다")),"^[ㄱ-힣]")
str_extract_all(as.character(RcppMeCab::pos("움직이다")),"[ㄱ-힣]")
str_extract(as.character(RcppMeCab::pos("움직이다")),"[ㄱ-힣]/$")
str_extract(as.character(RcppMeCab::pos("움직이다")),"[ㄱ-힣]//$")
str_extract(as.character(RcppMeCab::pos("움직이다")),"[ㄱ-힣]{1-3}")
str_extract(as.character(RcppMeCab::pos("움직이다")),"[ㄱ-힣]{1,3}")
str_extract(as.character(RcppMeCab::pos("움직이다")),"[ㄱ-힣]{1,4}")
str_extract(as.character(RcppMeCab::pos("움직이다")),"[ㄱ-힣]{1,10}")
str_detect(as.character(RcppMeCab::pos("중국인")),"(NNG|NNP)\"")
RcppMeCab::pos("중국인")
as.character(RcppMeCab::pos("중국인"))
as.character(RcppMeCab::pos("움직였다"))
str_detect(as.character(RcppMeCab::pos("중국인")),"NNG|NNP")
str_detect(as.character(RcppMeCab::pos("중국인")),"VV")
str_detect(as.character(RcppMeCab::pos("중국인")),"NNG|VV")
data <- read_csv("C:/Users/82102/Documents/workingDir/data/DICT.csv",locale = locale())
library('readr')
data <- read_csv("C:/Users/82102/Documents/workingDir/data/DICT.csv",locale = locale())
View(data)
data <- read_csv("C:/Users/82102/Documents/workingDir/data/joinData.csv",locale = locale())
data <- read_csv("C:/Users/82102/Documents/workingDir/data/joinData.csv",locale = locale())
View(data)
RcppMeCab::pos(as.character(data[1,6]))
as.character(RcppMeCab::pos(as.character(data[1,6])))
testData <- as.character(data[1,6])
testData
testData <- str_remove(testData,"c\\(|\\)")
testData
testData <- RcppMeCab::pos(testData)
testData
testData <- as.character(RcppMeCab::pos(testData))
testData
testData <- as.character(data[1,6])
testData
testData <- as.character(RcppMeCab::pos(testData))
testData
testData <- strsplit(testData,"c(|)")
testData
testData <- as.character(data[1,6])
testData
sepData <- str_remove_all(testData,"[^[ㄱ-힣\\s]]")
sepData
sepData <- stringr::str_remove_all(testData,"[^[ㄱ-힣\\s]]")
sepData
testData <- stringr::str_remove_all(testData,"[^[ㄱ-힣\\s]]")
testData
tempTalbe <- RcppMeCab::pos(testData,format = data.frame)
tempTalbe <- RcppMeCab::pos(testData,format = data.frame())
RcppMeCab::pos(testData,format = data.frame)
tempTable <- RcppMeCab::pos(testData,data.frame)
tempTable <- RcppMeCab::pos(testData,format = c(data.frame()))
tempTable <- RcppMeCab::pos(testData,format = data_frame)
tempTable <- RcppMeCab::pos(testData,format = "data.frame")
View(tempTable)
View(tempTable)
tempTable <- strsplit(testData,split = " ")
tempTable
RcppMeCab::pos("막고")
RcppMeCab::pos("뗄")
tempTable[[1]]
tempTable[[1]][1]
tempTable[[1]][2]
RcppMeCab::pos("자모의")
RcppMeCab::pos("한글 자모의 첫째 글자")
KoNLP::SimplePos09("자모의")
KoNLP::SimplePos09("한글 자모의 첫째 글자")
library('tidyverse')
library('tidytext')
library('httr')
library('rvest')
library('urltools')
library('dplyr')
library('stringr')
library('readr')
library('tidytext')
library('tidyverse')
KoNLP::SimplePos09("한글 자모의 첫째 글자")
SimplePos09("한글 자모의 첫째 글자")
library('KoNLP')
library('RcppMeCab')
library('RmecabKo')
SimplePos09("한글 자모의 첫째 글자")
SimplePos09("자모의")
View(tempTable)
PosTable <- RcppMeCab::pos(testData,format="data.frame")
View(PosTable)
size <- nrow(PosTable)
tempVector <- vector()
PosTable[1,5]
for(i in 1:size){
if(PosTable[i,5]=="NNG" | PosTable[i,5]=="NNP"){
tempVector <- c(tempVector,PosTable[i,4])
}
}
tempVector
PosTable[1,4]
PosTable[2,4]
for(i in 1:size){
if(PosTable[i,5]=="NNG" | PosTable[i,5]=="NNP"){
print(PosTable[i,4])
#tempVector <- c(tempVector,PosTable[i,4])
}
}
tempVector <- vector()
for(i in 1:size){
if(PosTable[i,5]=="NNG" | PosTable[i,5]=="NNP"){
print(PosTable[i,4])
tempVector <- c(tempVector,as.character(PosTable[i,4]))
}
}
tempVector
View(tempTable)
length(tempTable)
length(tempTable[[1]])
len <- length(tempTable[[1]])
RcppMeCab::pos("무서워하다")
for(i in 1:len){
word <- tempTable[[1]][i]
if(str_detect(as.character(RcppMeCab::pos(word)),"VV")){
url <- "https://dict.naver.com/search.nhn?dicQuery="+URLencode(word)+"&query="+URLencode(word)+"&target=dic&ie=utf8&query_utf=&isOnlyViewEE="
html <- read_html(url)
item <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[1]/a[1]/span/strong')
text <- html_text(item,trim=TRUE)
if(text!=word){
tempVector <- c(tempVector,text)
}
else{
item2 <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[2]/text()[2]')
text2 <- html_text(item2,trim=TRUE)
if(str_detect(text2,"활용형")){
item3 <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[2]/a/strong')
text3 <- html_text(item3,trim=TRUE)
tempVector <- c(tempVector,text3)
}
else{
tempVector <- c(tempVector,text2)
}
}
}
}
for(i in 1:len){
word <- tempTable[[1]][i]
if(str_detect(as.character(RcppMeCab::pos(word)),"VV")){
word
url <- "https://dict.naver.com/search.nhn?dicQuery="+URLencode(word)+"&query="+URLencode(word)+"&target=dic&ie=utf8&query_utf=&isOnlyViewEE="
html <- read_html(url)
item <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[1]/a[1]/span/strong')
text <- html_text(item,trim=TRUE)
if(text!=word){
tempVector <- c(tempVector,text)
}
else{
item2 <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[2]/text()[2]')
text2 <- html_text(item2,trim=TRUE)
if(str_detect(text2,"활용형")){
item3 <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[2]/a/strong')
text3 <- html_text(item3,trim=TRUE)
tempVector <- c(tempVector,text3)
}
else{
tempVector <- c(tempVector,text2)
}
}
}
for(i in 1:len){
word <- tempTable[[1]][i]
print(word)
if(str_detect(as.character(RcppMeCab::pos(word)),"VV")){
url <- "https://dict.naver.com/search.nhn?dicQuery="+URLencode(word)+"&query="+URLencode(word)+"&target=dic&ie=utf8&query_utf=&isOnlyViewEE="
html <- read_html(url)
item <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[1]/a[1]/span/strong')
text <- html_text(item,trim=TRUE)
if(text!=word){
tempVector <- c(tempVector,text)
}
else{
item2 <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[2]/text()[2]')
text2 <- html_text(item2,trim=TRUE)
if(str_detect(text2,"활용형")){
item3 <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[2]/a/strong')
text3 <- html_text(item3,trim=TRUE)
tempVector <- c(tempVector,text3)
}
else{
tempVector <- c(tempVector,text2)
}
}
}
}
url <- "https://dict.naver.com/search.nhn?dicQuery="+URLencode("이르며")+"&query="+URLencode("이르며")+"&target=dic&ie=utf8&query_utf=&isOnlyViewEE="
html <- read_html(url)
URLencode("이르며")
url <- "https://dict.naver.com/search.nhn?dicQuery="+URLencode("이르며")+"&query="+URLencode("이르며")+"&target=dic&ie=utf8&query_utf=&isOnlyViewEE="
for(i in 1:len){
word <- tempTable[[1]][i]
if(str_detect(as.character(RcppMeCab::pos(word)),"VV")){
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode(word)+"&query=",URLencode(word),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[1]/a[1]/span/strong')
text <- html_text(item,trim=TRUE)
if(text!=word){
tempVector <- c(tempVector,text)
}
else{
item2 <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[2]/text()[2]')
text2 <- html_text(item2,trim=TRUE)
if(str_detect(text2,"활용형")){
item3 <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[2]/a/strong')
text3 <- html_text(item3,trim=TRUE)
tempVector <- c(tempVector,text3)
}
else{
tempVector <- c(tempVector,text2)
}
}
}
}
for(i in 1:len){
word <- tempTable[[1]][i]
if(str_detect(as.character(RcppMeCab::pos(word)),"VV")){
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode(word),"&query=",URLencode(word),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[1]/a[1]/span/strong')
text <- html_text(item,trim=TRUE)
if(text!=word){
tempVector <- c(tempVector,text)
}
else{
item2 <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[2]/text()[2]')
text2 <- html_text(item2,trim=TRUE)
if(str_detect(text2,"활용형")){
item3 <- html_node(html,xpath = '//*[@id="content"]/div[1]/ul/li[1]/p[2]/a/strong')
text3 <- html_text(item3,trim=TRUE)
tempVector <- c(tempVector,text3)
}
else{
tempVector <- c(tempVector,text2)
}
}
}
}
text <- "가"
word <- "나"
text == word
tempVector
RcppMeCab::pos("기역이라")
RcppMeCab::pos("가에서와라")
RcppMeCab::pos("가에서와")
RcppMeCab::pos("가에서와")
RcppMeCab::pos(data[1,6])
RcppMeCab::pos(data[2,6])
RcppMeCab::pos(data[1000,6])
RcppMeCab::pos(data[10000,6])
RcppMeCab::pos("된")
RcppMeCab::pos("본뜬")
tempVector <- vector()
for(i in 1:size){
if(PosTable[i,5]=="NNG" | PosTable[i,5]=="NNP"){
tempVector <- c(tempVector,as.character(PosTable[i,4]))
}
else if(PosTable[i,5]=="VV"){
addStr <- paste0(as.character(PosTable[i,4]),"다")
tempVector <- c(tempVector,addStr)
}
}
tempVector
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("막고"),"&query=",URLencode("막고"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a:nth-child(1) > span > strong')
text <- html_text(item,trim=TRUE)
library('httr')
library('rvest')
library('urltools')
library('dplyr')
library('stringr')
library('readr')
library('tidytext')
library('tidyverse')
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("막고"),"&query=",URLencode("막고"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a:nth-child(1) > span > strong')
text <- html_text(item,trim=TRUE)
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("막고"),"&query=",URLencode("막고"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a > span > strong')
text <- html_text(item,trim=TRUE)
text
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("싸우는"),"&query=",URLencode("싸우는"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a:nth-child(1) > span > strong')
text <- html_text(item,trim=TRUE)
text
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("싸우는"),"&query=",URLencode("싸우는"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a > span > strong')
text <- html_text(item,trim=TRUE)
text
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("싸우는"),"&query=",URLencode("싸우는"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(2) > a > span > strong')
text <- html_text(item,trim=TRUE)
text
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("싸우는"),"&query=",URLencode("싸우는"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a > span > strong')
text <- html_text(item,trim=TRUE)
text
tempVector <- vector()
for(i in 1:size){
if(PosTable[i,5]=="NNG" | PosTable[i,5]=="NNP"){
tempVector <- c(tempVector,as.character(PosTable[i,4]))
}
else if(PosTable[i,5]=="VV"){
addStr <- paste0(as.character(PosTable[i,4]),"다")
tempVector <- c(tempVector,addStr)
}
else if(str_detect(PosTable[i,5],"VV")){
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode(PosTable[i,4]),"&query=",URLencode(PosTable[i,4]),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a > span > strong')
text <- html_text(item,trim=TRUE)
tempVector <- c(tempVector,text)
}
}
tempVector
URLencode(PosTable[1,4])
URLencode(as.character(PosTable[1,4]))
tempVector <- vector()
for(i in 1:size){
if(PosTable[i,5]=="NNG" | PosTable[i,5]=="NNP"){
tempVector <- c(tempVector,as.character(PosTable[i,4]))
}
else if(PosTable[i,5]=="VV"){
addStr <- paste0(as.character(PosTable[i,4]),"다")
tempVector <- c(tempVector,addStr)
}
else if(str_detect(PosTable[i,5],"VV")){
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode(as.character(PosTable[i,4])),"&query=",URLencode(as.character(PosTable[i,4])),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a > span > strong')
text <- html_text(item,trim=TRUE)
tempVector <- c(tempVector,text)
}
}
tempVector
tempVector
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("만든"),"&query=",URLencode("만든"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a > span > strong')
text <- html_text(item,trim=TRUE)
text
library('httr')
library('rvest')
library('urltools')
library('dplyr')
library('stringr')
library('readr')
library('tidytext')
library('tidyverse')
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("만든"),"&query=",URLencode("만든"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a > span > strong')
text <- html_text(item,trim=TRUE)
text
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("만든"),"&query=",URLencode("만든"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a > span > strong')
text <- html_text(item,trim=TRUE)
if(text!="만든"){
tempVector <- c(tempVector,text)
}
else if(text=="만든"){
item2 <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(2) > a > strong')
text2 <- html_text(item2,trim=TRUE)
tempVector <- c(tempVector,text2)
}
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("만든"),"&query=",URLencode("만든"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a > span > strong')
text <- html_text(item,trim=TRUE)
if(text=="만든"){
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(2) > a > strong')
text <- html_text(item,trim=TRUE)
}
tempVector <- c(tempVector,text2)
tempVector
url <- paste0("https://dict.naver.com/search.nhn?dicQuery=",URLencode("만든"),"&query=",URLencode("만든"),"&target=dic&ie=utf8&query_utf=&isOnlyViewEE=")
html <- read_html(url)
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(1) > a > span > strong')
text <- html_text(item,trim=TRUE)
if(text=="만든"){
item <- html_node(html,css = '#content > div.kr_dic_section.search_result.dic_kr_entry > ul > li:nth-child(1) > p:nth-child(2) > a > strong')
text <- html_text(item,trim=TRUE)
}
tempVector <- c(tempVector,text2)
tempVector
load("~/tempData1.csv")
library('readr')
checkTable <- read_csv("C:/Users/82102/Documents/workingDIR/data/tempData1.csv",locale = locale())
checkTable2 <- read_csv("C:/Users/82102/Documents/workingDIR/data/tempData2.csv",locale = locale())
View(checkTable)
RcppMeCab::pos("나무를 쪼갠다")
data <- read_csv('C:\\Users\\82102\\Documents\\workingDIR\\data\\
joinData.csv',locale = locale())
PosList <- vector()
for(i in 1:12){
temp <- read_csv(paste0('C:\\Users\\82102\\Documents\\workingDIR\\data\\tempData',as.character(i),'.csv'),locale = locale())
PosList <- rbind(PosList,temp)
}
nrow(PosList)
joinData <- cbind(data,PosList)
library('dplyr')
library('readr')
library('httr')
library('rvest')
library('tidyverse')
library('tidytext')
library('stringr')
data <- read_csv('C:\\Users\\82102\\Documents\\workingDIR\\data\\
joinData.csv',locale = locale())
PosList <- vector()
for(i in 1:12){
temp <- read_csv(paste0('C:\\Users\\82102\\Documents\\workingDIR\\data\\tempData',as.character(i),'.csv'),locale = locale())
PosList <- rbind(PosList,temp)
}
nrow(PosList)
joinData <- cbind(data,PosList)
View(data)
data <- read_csv('C:/Users/82102/Documents/workingDIR/data/joinData.csv',locale = locale())
PosList <- vector()
for(i in 1:12){
temp <- read_csv(paste0('C:\\Users\\82102\\Documents\\workingDIR\\data\\tempData',as.character(i),'.csv'),locale = locale())
PosList <- rbind(PosList,temp)
}
nrow(PosList)
joinData <- cbind(data,PosList)
joinData <- joinData[,c(1,2,3,4,5,6,18,7,8,9,10,11,12,13,14,15,16,17)]
joinData$'PosList' <- gsub('^NA,\\s|NA,\\s|, NA$','',joinData$'PosList')
View(joinData)
View(joinData)
graph <- read_csv("C:/Users/82102/Documents/workingDIR/data/graph2.csv",locale = locale())
library('readr')
graph <- read_csv("C:/Users/82102/Documents/workingDIR/data/graph2.csv",locale = locale())
graph <- read_csv("C:/Users/82102/Documents/workingDIR/data/graph2.csv",locale = locale())
graph <- read_csv("C:/Users/82102/Documents/workingDIR/data/graph2.csv",locale = locale())
graph <- read_csv("C:/Users/82102/Documents/workingDIR/data/graph2.csv",locale = locale())
graph <- read.csv("C:/Users/82102/Documents/workingDIR/data/graph.csv",header = TRUE, fileEncoding = "UTF-8")
graph <- read.csv("C:/Users/82102/Documents/workingDIR/data/graph.csv",header = TRUE, fileEncoding = "UTF-8")
View(graph)
graph <- read.csv("C:/Users/82102/Documents/workingDIR/data/graph2.csv",header = TRUE, fileEncoding = "UTF-8")
View(graph)
graph <- read.csv("C:/Users/82102/Documents/workingDIR/data/graph2.csv",header = TRUE, row.names = FALSE,fileEncoding = "UTF-8")
View(graph)
graph <- read.csv("C:/Users/82102/Documents/workingDIR/data/graph2.csv",header = TRUE, fileEncoding = "UTF-8")
View(graph)
View(graph)
graph <- read.csv("C:/Users/82102/Documents/workingDIR/data/graph2.csv", fill = TRUE, fileEncoding = 'UTF-8')
RcppMeCab::pos('지능을 사용하고 사회를 이루어 사는 동물')
setwd('C:\\Users\\82102\\Documents\\workingDIR\\function')
source('readcsv.R',encoding = 'UTF-8')
